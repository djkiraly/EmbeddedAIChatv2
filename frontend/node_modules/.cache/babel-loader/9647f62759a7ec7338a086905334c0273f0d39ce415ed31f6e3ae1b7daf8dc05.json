{"ast":null,"code":"// Simple date utilities to avoid external dependencies\n\nexport const formatDistanceToNow = (date, options = {}) => {\n  const now = new Date();\n  const diffMs = now - date;\n  const diffSeconds = Math.floor(diffMs / 1000);\n  const diffMinutes = Math.floor(diffSeconds / 60);\n  const diffHours = Math.floor(diffMinutes / 60);\n  const diffDays = Math.floor(diffHours / 24);\n  const addSuffix = options.addSuffix || false;\n  const suffix = addSuffix ? ' ago' : '';\n  if (diffSeconds < 60) {\n    return `just now`;\n  } else if (diffMinutes < 60) {\n    return `${diffMinutes} minute${diffMinutes !== 1 ? 's' : ''}${suffix}`;\n  } else if (diffHours < 24) {\n    return `${diffHours} hour${diffHours !== 1 ? 's' : ''}${suffix}`;\n  } else if (diffDays < 30) {\n    return `${diffDays} day${diffDays !== 1 ? 's' : ''}${suffix}`;\n  } else {\n    // For longer periods, return formatted date\n    return date.toLocaleDateString();\n  }\n};\nexport const formatDateTime = date => {\n  return date.toLocaleString();\n};\nexport const formatTime = date => {\n  return date.toLocaleTimeString([], {\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n};\nexport const formatDate = date => {\n  return date.toLocaleDateString();\n};\nexport const isToday = date => {\n  const today = new Date();\n  return date.toDateString() === today.toDateString();\n};\nexport const isYesterday = date => {\n  const yesterday = new Date();\n  yesterday.setDate(yesterday.getDate() - 1);\n  return date.toDateString() === yesterday.toDateString();\n};\nexport const getRelativeDate = date => {\n  if (isToday(date)) {\n    return 'Today';\n  } else if (isYesterday(date)) {\n    return 'Yesterday';\n  } else {\n    return formatDate(date);\n  }\n};","map":{"version":3,"names":["formatDistanceToNow","date","options","now","Date","diffMs","diffSeconds","Math","floor","diffMinutes","diffHours","diffDays","addSuffix","suffix","toLocaleDateString","formatDateTime","toLocaleString","formatTime","toLocaleTimeString","hour","minute","formatDate","isToday","today","toDateString","isYesterday","yesterday","setDate","getDate","getRelativeDate"],"sources":["D:/Projects/Embedded AI Agent/frontend/src/utils/dateUtils.js"],"sourcesContent":["// Simple date utilities to avoid external dependencies\r\n\r\nexport const formatDistanceToNow = (date, options = {}) => {\r\n  const now = new Date();\r\n  const diffMs = now - date;\r\n  const diffSeconds = Math.floor(diffMs / 1000);\r\n  const diffMinutes = Math.floor(diffSeconds / 60);\r\n  const diffHours = Math.floor(diffMinutes / 60);\r\n  const diffDays = Math.floor(diffHours / 24);\r\n\r\n  const addSuffix = options.addSuffix || false;\r\n  const suffix = addSuffix ? ' ago' : '';\r\n\r\n  if (diffSeconds < 60) {\r\n    return `just now`;\r\n  } else if (diffMinutes < 60) {\r\n    return `${diffMinutes} minute${diffMinutes !== 1 ? 's' : ''}${suffix}`;\r\n  } else if (diffHours < 24) {\r\n    return `${diffHours} hour${diffHours !== 1 ? 's' : ''}${suffix}`;\r\n  } else if (diffDays < 30) {\r\n    return `${diffDays} day${diffDays !== 1 ? 's' : ''}${suffix}`;\r\n  } else {\r\n    // For longer periods, return formatted date\r\n    return date.toLocaleDateString();\r\n  }\r\n};\r\n\r\nexport const formatDateTime = (date) => {\r\n  return date.toLocaleString();\r\n};\r\n\r\nexport const formatTime = (date) => {\r\n  return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n};\r\n\r\nexport const formatDate = (date) => {\r\n  return date.toLocaleDateString();\r\n};\r\n\r\nexport const isToday = (date) => {\r\n  const today = new Date();\r\n  return date.toDateString() === today.toDateString();\r\n};\r\n\r\nexport const isYesterday = (date) => {\r\n  const yesterday = new Date();\r\n  yesterday.setDate(yesterday.getDate() - 1);\r\n  return date.toDateString() === yesterday.toDateString();\r\n};\r\n\r\nexport const getRelativeDate = (date) => {\r\n  if (isToday(date)) {\r\n    return 'Today';\r\n  } else if (isYesterday(date)) {\r\n    return 'Yesterday';\r\n  } else {\r\n    return formatDate(date);\r\n  }\r\n}; "],"mappings":"AAAA;;AAEA,OAAO,MAAMA,mBAAmB,GAAGA,CAACC,IAAI,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EACzD,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;EACtB,MAAMC,MAAM,GAAGF,GAAG,GAAGF,IAAI;EACzB,MAAMK,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACH,MAAM,GAAG,IAAI,CAAC;EAC7C,MAAMI,WAAW,GAAGF,IAAI,CAACC,KAAK,CAACF,WAAW,GAAG,EAAE,CAAC;EAChD,MAAMI,SAAS,GAAGH,IAAI,CAACC,KAAK,CAACC,WAAW,GAAG,EAAE,CAAC;EAC9C,MAAME,QAAQ,GAAGJ,IAAI,CAACC,KAAK,CAACE,SAAS,GAAG,EAAE,CAAC;EAE3C,MAAME,SAAS,GAAGV,OAAO,CAACU,SAAS,IAAI,KAAK;EAC5C,MAAMC,MAAM,GAAGD,SAAS,GAAG,MAAM,GAAG,EAAE;EAEtC,IAAIN,WAAW,GAAG,EAAE,EAAE;IACpB,OAAO,UAAU;EACnB,CAAC,MAAM,IAAIG,WAAW,GAAG,EAAE,EAAE;IAC3B,OAAO,GAAGA,WAAW,UAAUA,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,EAAE,GAAGI,MAAM,EAAE;EACxE,CAAC,MAAM,IAAIH,SAAS,GAAG,EAAE,EAAE;IACzB,OAAO,GAAGA,SAAS,QAAQA,SAAS,KAAK,CAAC,GAAG,GAAG,GAAG,EAAE,GAAGG,MAAM,EAAE;EAClE,CAAC,MAAM,IAAIF,QAAQ,GAAG,EAAE,EAAE;IACxB,OAAO,GAAGA,QAAQ,OAAOA,QAAQ,KAAK,CAAC,GAAG,GAAG,GAAG,EAAE,GAAGE,MAAM,EAAE;EAC/D,CAAC,MAAM;IACL;IACA,OAAOZ,IAAI,CAACa,kBAAkB,CAAC,CAAC;EAClC;AACF,CAAC;AAED,OAAO,MAAMC,cAAc,GAAId,IAAI,IAAK;EACtC,OAAOA,IAAI,CAACe,cAAc,CAAC,CAAC;AAC9B,CAAC;AAED,OAAO,MAAMC,UAAU,GAAIhB,IAAI,IAAK;EAClC,OAAOA,IAAI,CAACiB,kBAAkB,CAAC,EAAE,EAAE;IAAEC,IAAI,EAAE,SAAS;IAAEC,MAAM,EAAE;EAAU,CAAC,CAAC;AAC5E,CAAC;AAED,OAAO,MAAMC,UAAU,GAAIpB,IAAI,IAAK;EAClC,OAAOA,IAAI,CAACa,kBAAkB,CAAC,CAAC;AAClC,CAAC;AAED,OAAO,MAAMQ,OAAO,GAAIrB,IAAI,IAAK;EAC/B,MAAMsB,KAAK,GAAG,IAAInB,IAAI,CAAC,CAAC;EACxB,OAAOH,IAAI,CAACuB,YAAY,CAAC,CAAC,KAAKD,KAAK,CAACC,YAAY,CAAC,CAAC;AACrD,CAAC;AAED,OAAO,MAAMC,WAAW,GAAIxB,IAAI,IAAK;EACnC,MAAMyB,SAAS,GAAG,IAAItB,IAAI,CAAC,CAAC;EAC5BsB,SAAS,CAACC,OAAO,CAACD,SAAS,CAACE,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;EAC1C,OAAO3B,IAAI,CAACuB,YAAY,CAAC,CAAC,KAAKE,SAAS,CAACF,YAAY,CAAC,CAAC;AACzD,CAAC;AAED,OAAO,MAAMK,eAAe,GAAI5B,IAAI,IAAK;EACvC,IAAIqB,OAAO,CAACrB,IAAI,CAAC,EAAE;IACjB,OAAO,OAAO;EAChB,CAAC,MAAM,IAAIwB,WAAW,CAACxB,IAAI,CAAC,EAAE;IAC5B,OAAO,WAAW;EACpB,CAAC,MAAM;IACL,OAAOoB,UAAU,CAACpB,IAAI,CAAC;EACzB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}