{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || '/api',\n  timeout: 30000,\n  // 30 seconds timeout for AI requests\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor\napi.interceptors.request.use(config => {\n  // Add any auth headers or other common headers here\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor\napi.interceptors.response.use(response => {\n  return response.data;\n}, error => {\n  var _error$response;\n  // Handle common error cases\n  let errorMessage = 'An unexpected error occurred';\n  if (error.response) {\n    var _error$response$data, _error$response$data2;\n    // Server responded with error status\n    errorMessage = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || ((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.message) || errorMessage;\n  } else if (error.request) {\n    // Request was made but no response received\n    errorMessage = 'No response from server. Please check your connection.';\n  } else if (error.code === 'ECONNABORTED') {\n    // Request timeout\n    errorMessage = 'Request timeout. The server took too long to respond.';\n  } else {\n    // Something else happened\n    errorMessage = error.message || errorMessage;\n  }\n  const enhancedError = new Error(errorMessage);\n  enhancedError.response = error.response;\n  enhancedError.status = (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status;\n  return Promise.reject(enhancedError);\n});\n\n// Chat service\nexport const chatService = {\n  // Send message to AI\n  sendMessage: async data => {\n    return await api.post('/chat', data);\n  },\n  // Get available models\n  getModels: async () => {\n    return await api.get('/models');\n  },\n  // Get chat sessions\n  getSessions: async (limit = 50) => {\n    return await api.get(`/sessions?limit=${limit}`);\n  },\n  // Get specific session\n  getSession: async sessionId => {\n    return await api.get(`/sessions/${sessionId}`);\n  },\n  // Get messages for a session\n  getSessionMessages: async (sessionId, limit = 100) => {\n    return await api.get(`/sessions/${sessionId}/messages?limit=${limit}`);\n  },\n  // Delete session\n  deleteSession: async sessionId => {\n    return await api.delete(`/sessions/${sessionId}`);\n  },\n  // Settings endpoints\n  getSettings: async () => {\n    return await api.get('/settings');\n  },\n  updateSettings: async data => {\n    return await api.put('/settings', data);\n  },\n  getSetting: async key => {\n    return await api.get(`/settings/${key}`);\n  },\n  updateSetting: async (key, value) => {\n    return await api.put(`/settings/${key}`, {\n      value\n    });\n  },\n  deleteSetting: async key => {\n    return await api.delete(`/settings/${key}`);\n  },\n  testApiKey: async (provider, apiKey) => {\n    return await api.post('/settings/test-api-key', {\n      provider,\n      apiKey\n    });\n  }\n};\n\n// Reporting service\nexport const reportService = {\n  // Get usage report\n  getReport: async () => {\n    return await api.get('/report');\n  },\n  // Get sessions report\n  getSessionsReport: async (limit = 50, offset = 0) => {\n    return await api.get(`/report/sessions?limit=${limit}&offset=${offset}`);\n  },\n  // Get models report\n  getModelsReport: async () => {\n    return await api.get('/report/models');\n  },\n  // Export data\n  exportData: async (format = 'json', includeMessages = false) => {\n    const params = new URLSearchParams({\n      format,\n      include_messages: includeMessages.toString()\n    });\n    const response = await axios({\n      method: 'GET',\n      url: `${process.env.REACT_APP_API_URL || '/api'}/report/export?${params}`,\n      responseType: 'blob'\n    });\n    return response;\n  }\n};\n\n// Health check\nexport const healthService = {\n  check: async () => {\n    return await api.get('/health', {\n      baseURL: process.env.REACT_APP_API_URL || ''\n    });\n  }\n};\n\n// Utility functions\nexport const apiUtils = {\n  // Check if error is network related\n  isNetworkError: error => {\n    return !error.response && error.request;\n  },\n  // Check if error is timeout\n  isTimeoutError: error => {\n    return error.code === 'ECONNABORTED';\n  },\n  // Check if error is server error (5xx)\n  isServerError: error => {\n    return error.status && error.status >= 500;\n  },\n  // Check if error is client error (4xx)\n  isClientError: error => {\n    return error.status && error.status >= 400 && error.status < 500;\n  },\n  // Format error for user display\n  formatError: error => {\n    if (apiUtils.isNetworkError(error)) {\n      return 'Connection error. Please check your internet connection.';\n    }\n    if (apiUtils.isTimeoutError(error)) {\n      return 'Request timeout. The server is taking too long to respond.';\n    }\n    if (apiUtils.isServerError(error)) {\n      return 'Server error. Please try again later.';\n    }\n    return error.message || 'An unexpected error occurred.';\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","error","Promise","reject","response","data","_error$response","errorMessage","_error$response$data","_error$response$data2","message","code","enhancedError","Error","status","chatService","sendMessage","post","getModels","get","getSessions","limit","getSession","sessionId","getSessionMessages","deleteSession","delete","getSettings","updateSettings","put","getSetting","key","updateSetting","value","deleteSetting","testApiKey","provider","apiKey","reportService","getReport","getSessionsReport","offset","getModelsReport","exportData","format","includeMessages","params","URLSearchParams","include_messages","toString","method","url","responseType","healthService","check","apiUtils","isNetworkError","isTimeoutError","isServerError","isClientError","formatError"],"sources":["D:/Projects/Embedded AI Agent/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || '/api',\r\n  timeout: 30000, // 30 seconds timeout for AI requests\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    // Add any auth headers or other common headers here\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response.data;\r\n  },\r\n  (error) => {\r\n    // Handle common error cases\r\n    let errorMessage = 'An unexpected error occurred';\r\n    \r\n    if (error.response) {\r\n      // Server responded with error status\r\n      errorMessage = error.response.data?.error || error.response.data?.message || errorMessage;\r\n    } else if (error.request) {\r\n      // Request was made but no response received\r\n      errorMessage = 'No response from server. Please check your connection.';\r\n    } else if (error.code === 'ECONNABORTED') {\r\n      // Request timeout\r\n      errorMessage = 'Request timeout. The server took too long to respond.';\r\n    } else {\r\n      // Something else happened\r\n      errorMessage = error.message || errorMessage;\r\n    }\r\n    \r\n    const enhancedError = new Error(errorMessage);\r\n    enhancedError.response = error.response;\r\n    enhancedError.status = error.response?.status;\r\n    \r\n    return Promise.reject(enhancedError);\r\n  }\r\n);\r\n\r\n// Chat service\r\nexport const chatService = {\r\n  // Send message to AI\r\n  sendMessage: async (data) => {\r\n    return await api.post('/chat', data);\r\n  },\r\n\r\n  // Get available models\r\n  getModels: async () => {\r\n    return await api.get('/models');\r\n  },\r\n\r\n  // Get chat sessions\r\n  getSessions: async (limit = 50) => {\r\n    return await api.get(`/sessions?limit=${limit}`);\r\n  },\r\n\r\n  // Get specific session\r\n  getSession: async (sessionId) => {\r\n    return await api.get(`/sessions/${sessionId}`);\r\n  },\r\n\r\n  // Get messages for a session\r\n  getSessionMessages: async (sessionId, limit = 100) => {\r\n    return await api.get(`/sessions/${sessionId}/messages?limit=${limit}`);\r\n  },\r\n\r\n  // Delete session\r\n  deleteSession: async (sessionId) => {\r\n    return await api.delete(`/sessions/${sessionId}`);\r\n  },\r\n\r\n  // Settings endpoints\r\n  getSettings: async () => {\r\n    return await api.get('/settings');\r\n  },\r\n\r\n  updateSettings: async (data) => {\r\n    return await api.put('/settings', data);\r\n  },\r\n\r\n  getSetting: async (key) => {\r\n    return await api.get(`/settings/${key}`);\r\n  },\r\n\r\n  updateSetting: async (key, value) => {\r\n    return await api.put(`/settings/${key}`, { value });\r\n  },\r\n\r\n  deleteSetting: async (key) => {\r\n    return await api.delete(`/settings/${key}`);\r\n  },\r\n\r\n  testApiKey: async (provider, apiKey) => {\r\n    return await api.post('/settings/test-api-key', { provider, apiKey });\r\n  },\r\n};\r\n\r\n// Reporting service\r\nexport const reportService = {\r\n  // Get usage report\r\n  getReport: async () => {\r\n    return await api.get('/report');\r\n  },\r\n\r\n  // Get sessions report\r\n  getSessionsReport: async (limit = 50, offset = 0) => {\r\n    return await api.get(`/report/sessions?limit=${limit}&offset=${offset}`);\r\n  },\r\n\r\n  // Get models report\r\n  getModelsReport: async () => {\r\n    return await api.get('/report/models');\r\n  },\r\n\r\n  // Export data\r\n  exportData: async (format = 'json', includeMessages = false) => {\r\n    const params = new URLSearchParams({\r\n      format,\r\n      include_messages: includeMessages.toString()\r\n    });\r\n    \r\n    const response = await axios({\r\n      method: 'GET',\r\n      url: `${process.env.REACT_APP_API_URL || '/api'}/report/export?${params}`,\r\n      responseType: 'blob',\r\n    });\r\n    \r\n    return response;\r\n  },\r\n};\r\n\r\n// Health check\r\nexport const healthService = {\r\n  check: async () => {\r\n    return await api.get('/health', { baseURL: process.env.REACT_APP_API_URL || '' });\r\n  },\r\n};\r\n\r\n// Utility functions\r\nexport const apiUtils = {\r\n  // Check if error is network related\r\n  isNetworkError: (error) => {\r\n    return !error.response && error.request;\r\n  },\r\n\r\n  // Check if error is timeout\r\n  isTimeoutError: (error) => {\r\n    return error.code === 'ECONNABORTED';\r\n  },\r\n\r\n  // Check if error is server error (5xx)\r\n  isServerError: (error) => {\r\n    return error.status && error.status >= 500;\r\n  },\r\n\r\n  // Check if error is client error (4xx)\r\n  isClientError: (error) => {\r\n    return error.status && error.status >= 400 && error.status < 500;\r\n  },\r\n\r\n  // Format error for user display\r\n  formatError: (error) => {\r\n    if (apiUtils.isNetworkError(error)) {\r\n      return 'Connection error. Please check your internet connection.';\r\n    }\r\n    \r\n    if (apiUtils.isTimeoutError(error)) {\r\n      return 'Request timeout. The server is taking too long to respond.';\r\n    }\r\n    \r\n    if (apiUtils.isServerError(error)) {\r\n      return 'Server error. Please try again later.';\r\n    }\r\n    \r\n    return error.message || 'An unexpected error occurred.';\r\n  },\r\n};\r\n\r\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}