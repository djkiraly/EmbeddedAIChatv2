{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Embedded AI Agent\\\\frontend\\\\src\\\\context\\\\ChatContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { chatService } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContext = /*#__PURE__*/createContext();\n\n// Initial state\nconst initialState = {\n  currentSession: null,\n  sessions: [],\n  messages: [],\n  selectedModel: 'gpt-3.5-turbo',\n  availableModels: [],\n  isLoading: false,\n  isTyping: false,\n  settings: {\n    default_model: 'gpt-3.5-turbo',\n    max_tokens: '2000',\n    temperature: '0.7',\n    logging_enabled: 'true'\n  },\n  apiKeys: {},\n  error: null\n};\n\n// Action types\nconst actionTypes = {\n  SET_LOADING: 'SET_LOADING',\n  SET_TYPING: 'SET_TYPING',\n  SET_ERROR: 'SET_ERROR',\n  SET_SESSIONS: 'SET_SESSIONS',\n  SET_CURRENT_SESSION: 'SET_CURRENT_SESSION',\n  SET_MESSAGES: 'SET_MESSAGES',\n  ADD_MESSAGE: 'ADD_MESSAGE',\n  SET_SELECTED_MODEL: 'SET_SELECTED_MODEL',\n  SET_AVAILABLE_MODELS: 'SET_AVAILABLE_MODELS',\n  SET_SETTINGS: 'SET_SETTINGS',\n  SET_API_KEYS: 'SET_API_KEYS',\n  CLEAR_ERROR: 'CLEAR_ERROR',\n  CREATE_NEW_SESSION: 'CREATE_NEW_SESSION',\n  UPDATE_SESSION: 'UPDATE_SESSION'\n};\n\n// Reducer function\nfunction chatReducer(state, action) {\n  switch (action.type) {\n    case actionTypes.SET_LOADING:\n      return {\n        ...state,\n        isLoading: action.payload\n      };\n    case actionTypes.SET_TYPING:\n      return {\n        ...state,\n        isTyping: action.payload\n      };\n    case actionTypes.SET_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n        isLoading: false,\n        isTyping: false\n      };\n    case actionTypes.CLEAR_ERROR:\n      return {\n        ...state,\n        error: null\n      };\n    case actionTypes.SET_SESSIONS:\n      return {\n        ...state,\n        sessions: action.payload\n      };\n    case actionTypes.SET_CURRENT_SESSION:\n      return {\n        ...state,\n        currentSession: action.payload\n      };\n    case actionTypes.SET_MESSAGES:\n      return {\n        ...state,\n        messages: action.payload\n      };\n    case actionTypes.ADD_MESSAGE:\n      return {\n        ...state,\n        messages: [...state.messages, action.payload]\n      };\n    case actionTypes.SET_SELECTED_MODEL:\n      return {\n        ...state,\n        selectedModel: action.payload\n      };\n    case actionTypes.SET_AVAILABLE_MODELS:\n      return {\n        ...state,\n        availableModels: action.payload\n      };\n    case actionTypes.SET_SETTINGS:\n      return {\n        ...state,\n        settings: {\n          ...state.settings,\n          ...action.payload\n        }\n      };\n    case actionTypes.SET_API_KEYS:\n      return {\n        ...state,\n        apiKeys: action.payload\n      };\n    case actionTypes.CREATE_NEW_SESSION:\n      const newSession = action.payload;\n      return {\n        ...state,\n        currentSession: newSession,\n        sessions: [newSession, ...state.sessions],\n        messages: []\n      };\n    case actionTypes.UPDATE_SESSION:\n      return {\n        ...state,\n        sessions: state.sessions.map(session => session.id === action.payload.id ? {\n          ...session,\n          ...action.payload\n        } : session)\n      };\n    default:\n      return state;\n  }\n}\n\n// Context provider component\nexport function ChatProvider({\n  children\n}) {\n  _s();\n  const [state, dispatch] = useReducer(chatReducer, initialState);\n\n  // Load initial data\n  useEffect(() => {\n    loadInitialData();\n  }, []);\n\n  // Poll for available models every 30 seconds\n  useEffect(() => {\n    const pollModels = async () => {\n      try {\n        const modelsResponse = await chatService.getModels();\n        dispatch({\n          type: actionTypes.SET_AVAILABLE_MODELS,\n          payload: modelsResponse.models\n        });\n      } catch (error) {\n        console.warn('Failed to refresh models:', error);\n        // Don't set error state for polling failures to avoid interrupting user experience\n      }\n    };\n\n    // Poll every 30 seconds\n    const interval = setInterval(pollModels, 30000);\n\n    // Cleanup interval on unmount\n    return () => clearInterval(interval);\n  }, []);\n  const loadInitialData = async () => {\n    try {\n      dispatch({\n        type: actionTypes.SET_LOADING,\n        payload: true\n      });\n\n      // Load available models\n      const modelsResponse = await chatService.getModels();\n      dispatch({\n        type: actionTypes.SET_AVAILABLE_MODELS,\n        payload: modelsResponse.models\n      });\n\n      // Load settings\n      const settingsResponse = await chatService.getSettings();\n      dispatch({\n        type: actionTypes.SET_SETTINGS,\n        payload: settingsResponse.settings\n      });\n      dispatch({\n        type: actionTypes.SET_API_KEYS,\n        payload: settingsResponse.apiKeys\n      });\n\n      // Set default model from settings\n      const defaultModel = settingsResponse.settings.default_model || 'gpt-3.5-turbo';\n      dispatch({\n        type: actionTypes.SET_SELECTED_MODEL,\n        payload: defaultModel\n      });\n\n      // Load recent sessions\n      const sessionsResponse = await chatService.getSessions();\n      dispatch({\n        type: actionTypes.SET_SESSIONS,\n        payload: sessionsResponse.sessions\n      });\n    } catch (error) {\n      console.error('Failed to load initial data:', error);\n      dispatch({\n        type: actionTypes.SET_ERROR,\n        payload: error.message\n      });\n    } finally {\n      dispatch({\n        type: actionTypes.SET_LOADING,\n        payload: false\n      });\n    }\n  };\n\n  // Actions\n  const actions = {\n    sendMessage: async (message, sessionId = null) => {\n      try {\n        var _state$currentSession, _state$currentSession2;\n        dispatch({\n          type: actionTypes.SET_TYPING,\n          payload: true\n        });\n        dispatch({\n          type: actionTypes.CLEAR_ERROR\n        });\n\n        // Add user message immediately\n        const userMessage = {\n          id: Date.now().toString(),\n          content: message,\n          role: 'user',\n          timestamp: new Date().toISOString(),\n          session_id: sessionId || ((_state$currentSession = state.currentSession) === null || _state$currentSession === void 0 ? void 0 : _state$currentSession.id)\n        };\n        dispatch({\n          type: actionTypes.ADD_MESSAGE,\n          payload: userMessage\n        });\n\n        // Send to API\n        const response = await chatService.sendMessage({\n          message,\n          model: state.selectedModel,\n          sessionId: sessionId || ((_state$currentSession2 = state.currentSession) === null || _state$currentSession2 === void 0 ? void 0 : _state$currentSession2.id)\n        });\n\n        // Add AI response\n        dispatch({\n          type: actionTypes.ADD_MESSAGE,\n          payload: response.message\n        });\n\n        // Update current session if new\n        if (!state.currentSession || state.currentSession.id !== response.session.id) {\n          dispatch({\n            type: actionTypes.SET_CURRENT_SESSION,\n            payload: response.session\n          });\n        }\n\n        // Update session in list\n        dispatch({\n          type: actionTypes.UPDATE_SESSION,\n          payload: response.session\n        });\n        return response;\n      } catch (error) {\n        console.error('Send message error:', error);\n        dispatch({\n          type: actionTypes.SET_ERROR,\n          payload: error.message\n        });\n        throw error;\n      } finally {\n        dispatch({\n          type: actionTypes.SET_TYPING,\n          payload: false\n        });\n      }\n    },\n    loadSession: async sessionId => {\n      try {\n        dispatch({\n          type: actionTypes.SET_LOADING,\n          payload: true\n        });\n        dispatch({\n          type: actionTypes.CLEAR_ERROR\n        });\n        const response = await chatService.getSession(sessionId);\n        dispatch({\n          type: actionTypes.SET_CURRENT_SESSION,\n          payload: response.session\n        });\n        dispatch({\n          type: actionTypes.SET_MESSAGES,\n          payload: response.messages\n        });\n      } catch (error) {\n        console.error('Load session error:', error);\n        dispatch({\n          type: actionTypes.SET_ERROR,\n          payload: error.message\n        });\n      } finally {\n        dispatch({\n          type: actionTypes.SET_LOADING,\n          payload: false\n        });\n      }\n    },\n    startNewSession: () => {\n      dispatch({\n        type: actionTypes.SET_CURRENT_SESSION,\n        payload: null\n      });\n      dispatch({\n        type: actionTypes.SET_MESSAGES,\n        payload: []\n      });\n    },\n    setSelectedModel: model => {\n      dispatch({\n        type: actionTypes.SET_SELECTED_MODEL,\n        payload: model\n      });\n    },\n    updateSettings: async (newSettings, newApiKeys = null) => {\n      try {\n        dispatch({\n          type: actionTypes.SET_LOADING,\n          payload: true\n        });\n        const response = await chatService.updateSettings({\n          settings: newSettings,\n          apiKeys: newApiKeys\n        });\n        dispatch({\n          type: actionTypes.SET_SETTINGS,\n          payload: response.settings\n        });\n        if (response.apiKeys) {\n          dispatch({\n            type: actionTypes.SET_API_KEYS,\n            payload: response.apiKeys\n          });\n        }\n        return response;\n      } catch (error) {\n        console.error('Update settings error:', error);\n        dispatch({\n          type: actionTypes.SET_ERROR,\n          payload: error.message\n        });\n        throw error;\n      } finally {\n        dispatch({\n          type: actionTypes.SET_LOADING,\n          payload: false\n        });\n      }\n    },\n    refreshSessions: async () => {\n      try {\n        const response = await chatService.getSessions();\n        dispatch({\n          type: actionTypes.SET_SESSIONS,\n          payload: response.sessions\n        });\n      } catch (error) {\n        console.error('Refresh sessions error:', error);\n        dispatch({\n          type: actionTypes.SET_ERROR,\n          payload: error.message\n        });\n      }\n    },\n    deleteSession: async sessionId => {\n      try {\n        var _state$currentSession3;\n        await chatService.deleteSession(sessionId);\n\n        // Remove from sessions list\n        const updatedSessions = state.sessions.filter(s => s.id !== sessionId);\n        dispatch({\n          type: actionTypes.SET_SESSIONS,\n          payload: updatedSessions\n        });\n\n        // Clear current session if it was deleted\n        if (((_state$currentSession3 = state.currentSession) === null || _state$currentSession3 === void 0 ? void 0 : _state$currentSession3.id) === sessionId) {\n          dispatch({\n            type: actionTypes.SET_CURRENT_SESSION,\n            payload: null\n          });\n          dispatch({\n            type: actionTypes.SET_MESSAGES,\n            payload: []\n          });\n        }\n      } catch (error) {\n        console.error('Delete session error:', error);\n        dispatch({\n          type: actionTypes.SET_ERROR,\n          payload: error.message\n        });\n        throw error;\n      }\n    },\n    clearError: () => {\n      dispatch({\n        type: actionTypes.CLEAR_ERROR\n      });\n    },\n    refreshModels: async () => {\n      try {\n        const modelsResponse = await chatService.getModels();\n        dispatch({\n          type: actionTypes.SET_AVAILABLE_MODELS,\n          payload: modelsResponse.models\n        });\n        return modelsResponse.models;\n      } catch (error) {\n        console.error('Refresh models error:', error);\n        dispatch({\n          type: actionTypes.SET_ERROR,\n          payload: error.message\n        });\n        throw error;\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: {\n      state,\n      actions\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 306,\n    columnNumber: 5\n  }, this);\n}\n\n// Custom hook to use chat context\n_s(ChatProvider, \"GUSXxL/WUElrtHc/X73NyHNRMdw=\");\n_c = ChatProvider;\nexport function useChat() {\n  _s2();\n  const context = useContext(ChatContext);\n  if (!context) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n}\n_s2(useChat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default ChatContext;\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","chatService","jsxDEV","_jsxDEV","ChatContext","initialState","currentSession","sessions","messages","selectedModel","availableModels","isLoading","isTyping","settings","default_model","max_tokens","temperature","logging_enabled","apiKeys","error","actionTypes","SET_LOADING","SET_TYPING","SET_ERROR","SET_SESSIONS","SET_CURRENT_SESSION","SET_MESSAGES","ADD_MESSAGE","SET_SELECTED_MODEL","SET_AVAILABLE_MODELS","SET_SETTINGS","SET_API_KEYS","CLEAR_ERROR","CREATE_NEW_SESSION","UPDATE_SESSION","chatReducer","state","action","type","payload","newSession","map","session","id","ChatProvider","children","_s","dispatch","loadInitialData","pollModels","modelsResponse","getModels","models","console","warn","interval","setInterval","clearInterval","settingsResponse","getSettings","defaultModel","sessionsResponse","getSessions","message","actions","sendMessage","sessionId","_state$currentSession","_state$currentSession2","userMessage","Date","now","toString","content","role","timestamp","toISOString","session_id","response","model","loadSession","getSession","startNewSession","setSelectedModel","updateSettings","newSettings","newApiKeys","refreshSessions","deleteSession","_state$currentSession3","updatedSessions","filter","s","clearError","refreshModels","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useChat","_s2","context","Error","$RefreshReg$"],"sources":["D:/Projects/Embedded AI Agent/frontend/src/context/ChatContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\nimport { chatService } from '../services/api';\r\n\r\nconst ChatContext = createContext();\r\n\r\n// Initial state\r\nconst initialState = {\r\n  currentSession: null,\r\n  sessions: [],\r\n  messages: [],\r\n  selectedModel: 'gpt-3.5-turbo',\r\n  availableModels: [],\r\n  isLoading: false,\r\n  isTyping: false,\r\n  settings: {\r\n    default_model: 'gpt-3.5-turbo',\r\n    max_tokens: '2000',\r\n    temperature: '0.7',\r\n    logging_enabled: 'true'\r\n  },\r\n  apiKeys: {},\r\n  error: null\r\n};\r\n\r\n// Action types\r\nconst actionTypes = {\r\n  SET_LOADING: 'SET_LOADING',\r\n  SET_TYPING: 'SET_TYPING',\r\n  SET_ERROR: 'SET_ERROR',\r\n  SET_SESSIONS: 'SET_SESSIONS',\r\n  SET_CURRENT_SESSION: 'SET_CURRENT_SESSION',\r\n  SET_MESSAGES: 'SET_MESSAGES',\r\n  ADD_MESSAGE: 'ADD_MESSAGE',\r\n  SET_SELECTED_MODEL: 'SET_SELECTED_MODEL',\r\n  SET_AVAILABLE_MODELS: 'SET_AVAILABLE_MODELS',\r\n  SET_SETTINGS: 'SET_SETTINGS',\r\n  SET_API_KEYS: 'SET_API_KEYS',\r\n  CLEAR_ERROR: 'CLEAR_ERROR',\r\n  CREATE_NEW_SESSION: 'CREATE_NEW_SESSION',\r\n  UPDATE_SESSION: 'UPDATE_SESSION'\r\n};\r\n\r\n// Reducer function\r\nfunction chatReducer(state, action) {\r\n  switch (action.type) {\r\n    case actionTypes.SET_LOADING:\r\n      return { ...state, isLoading: action.payload };\r\n    \r\n    case actionTypes.SET_TYPING:\r\n      return { ...state, isTyping: action.payload };\r\n    \r\n    case actionTypes.SET_ERROR:\r\n      return { ...state, error: action.payload, isLoading: false, isTyping: false };\r\n    \r\n    case actionTypes.CLEAR_ERROR:\r\n      return { ...state, error: null };\r\n    \r\n    case actionTypes.SET_SESSIONS:\r\n      return { ...state, sessions: action.payload };\r\n    \r\n    case actionTypes.SET_CURRENT_SESSION:\r\n      return { ...state, currentSession: action.payload };\r\n    \r\n    case actionTypes.SET_MESSAGES:\r\n      return { ...state, messages: action.payload };\r\n    \r\n    case actionTypes.ADD_MESSAGE:\r\n      return { ...state, messages: [...state.messages, action.payload] };\r\n    \r\n    case actionTypes.SET_SELECTED_MODEL:\r\n      return { ...state, selectedModel: action.payload };\r\n    \r\n    case actionTypes.SET_AVAILABLE_MODELS:\r\n      return { ...state, availableModels: action.payload };\r\n    \r\n    case actionTypes.SET_SETTINGS:\r\n      return { \r\n        ...state, \r\n        settings: { ...state.settings, ...action.payload }\r\n      };\r\n    \r\n    case actionTypes.SET_API_KEYS:\r\n      return { ...state, apiKeys: action.payload };\r\n    \r\n    case actionTypes.CREATE_NEW_SESSION:\r\n      const newSession = action.payload;\r\n      return {\r\n        ...state,\r\n        currentSession: newSession,\r\n        sessions: [newSession, ...state.sessions],\r\n        messages: []\r\n      };\r\n    \r\n    case actionTypes.UPDATE_SESSION:\r\n      return {\r\n        ...state,\r\n        sessions: state.sessions.map(session =>\r\n          session.id === action.payload.id ? { ...session, ...action.payload } : session\r\n        )\r\n      };\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// Context provider component\r\nexport function ChatProvider({ children }) {\r\n  const [state, dispatch] = useReducer(chatReducer, initialState);\r\n\r\n  // Load initial data\r\n  useEffect(() => {\r\n    loadInitialData();\r\n  }, []);\r\n\r\n  // Poll for available models every 30 seconds\r\n  useEffect(() => {\r\n    const pollModels = async () => {\r\n      try {\r\n        const modelsResponse = await chatService.getModels();\r\n        dispatch({ type: actionTypes.SET_AVAILABLE_MODELS, payload: modelsResponse.models });\r\n      } catch (error) {\r\n        console.warn('Failed to refresh models:', error);\r\n        // Don't set error state for polling failures to avoid interrupting user experience\r\n      }\r\n    };\r\n\r\n    // Poll every 30 seconds\r\n    const interval = setInterval(pollModels, 30000);\r\n\r\n    // Cleanup interval on unmount\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const loadInitialData = async () => {\r\n    try {\r\n      dispatch({ type: actionTypes.SET_LOADING, payload: true });\r\n\r\n      // Load available models\r\n      const modelsResponse = await chatService.getModels();\r\n      dispatch({ type: actionTypes.SET_AVAILABLE_MODELS, payload: modelsResponse.models });\r\n\r\n      // Load settings\r\n      const settingsResponse = await chatService.getSettings();\r\n      dispatch({ type: actionTypes.SET_SETTINGS, payload: settingsResponse.settings });\r\n      dispatch({ type: actionTypes.SET_API_KEYS, payload: settingsResponse.apiKeys });\r\n\r\n      // Set default model from settings\r\n      const defaultModel = settingsResponse.settings.default_model || 'gpt-3.5-turbo';\r\n      dispatch({ type: actionTypes.SET_SELECTED_MODEL, payload: defaultModel });\r\n\r\n      // Load recent sessions\r\n      const sessionsResponse = await chatService.getSessions();\r\n      dispatch({ type: actionTypes.SET_SESSIONS, payload: sessionsResponse.sessions });\r\n\r\n    } catch (error) {\r\n      console.error('Failed to load initial data:', error);\r\n      dispatch({ type: actionTypes.SET_ERROR, payload: error.message });\r\n    } finally {\r\n      dispatch({ type: actionTypes.SET_LOADING, payload: false });\r\n    }\r\n  };\r\n\r\n  // Actions\r\n  const actions = {\r\n    sendMessage: async (message, sessionId = null) => {\r\n      try {\r\n        dispatch({ type: actionTypes.SET_TYPING, payload: true });\r\n        dispatch({ type: actionTypes.CLEAR_ERROR });\r\n\r\n        // Add user message immediately\r\n        const userMessage = {\r\n          id: Date.now().toString(),\r\n          content: message,\r\n          role: 'user',\r\n          timestamp: new Date().toISOString(),\r\n          session_id: sessionId || state.currentSession?.id\r\n        };\r\n        dispatch({ type: actionTypes.ADD_MESSAGE, payload: userMessage });\r\n\r\n        // Send to API\r\n        const response = await chatService.sendMessage({\r\n          message,\r\n          model: state.selectedModel,\r\n          sessionId: sessionId || state.currentSession?.id\r\n        });\r\n\r\n        // Add AI response\r\n        dispatch({ type: actionTypes.ADD_MESSAGE, payload: response.message });\r\n\r\n        // Update current session if new\r\n        if (!state.currentSession || state.currentSession.id !== response.session.id) {\r\n          dispatch({ type: actionTypes.SET_CURRENT_SESSION, payload: response.session });\r\n        }\r\n\r\n        // Update session in list\r\n        dispatch({ type: actionTypes.UPDATE_SESSION, payload: response.session });\r\n\r\n        return response;\r\n      } catch (error) {\r\n        console.error('Send message error:', error);\r\n        dispatch({ type: actionTypes.SET_ERROR, payload: error.message });\r\n        throw error;\r\n      } finally {\r\n        dispatch({ type: actionTypes.SET_TYPING, payload: false });\r\n      }\r\n    },\r\n\r\n    loadSession: async (sessionId) => {\r\n      try {\r\n        dispatch({ type: actionTypes.SET_LOADING, payload: true });\r\n        dispatch({ type: actionTypes.CLEAR_ERROR });\r\n\r\n        const response = await chatService.getSession(sessionId);\r\n        dispatch({ type: actionTypes.SET_CURRENT_SESSION, payload: response.session });\r\n        dispatch({ type: actionTypes.SET_MESSAGES, payload: response.messages });\r\n      } catch (error) {\r\n        console.error('Load session error:', error);\r\n        dispatch({ type: actionTypes.SET_ERROR, payload: error.message });\r\n      } finally {\r\n        dispatch({ type: actionTypes.SET_LOADING, payload: false });\r\n      }\r\n    },\r\n\r\n    startNewSession: () => {\r\n      dispatch({ type: actionTypes.SET_CURRENT_SESSION, payload: null });\r\n      dispatch({ type: actionTypes.SET_MESSAGES, payload: [] });\r\n    },\r\n\r\n    setSelectedModel: (model) => {\r\n      dispatch({ type: actionTypes.SET_SELECTED_MODEL, payload: model });\r\n    },\r\n\r\n    updateSettings: async (newSettings, newApiKeys = null) => {\r\n      try {\r\n        dispatch({ type: actionTypes.SET_LOADING, payload: true });\r\n\r\n        const response = await chatService.updateSettings({\r\n          settings: newSettings,\r\n          apiKeys: newApiKeys\r\n        });\r\n\r\n        dispatch({ type: actionTypes.SET_SETTINGS, payload: response.settings });\r\n        if (response.apiKeys) {\r\n          dispatch({ type: actionTypes.SET_API_KEYS, payload: response.apiKeys });\r\n        }\r\n\r\n        return response;\r\n      } catch (error) {\r\n        console.error('Update settings error:', error);\r\n        dispatch({ type: actionTypes.SET_ERROR, payload: error.message });\r\n        throw error;\r\n      } finally {\r\n        dispatch({ type: actionTypes.SET_LOADING, payload: false });\r\n      }\r\n    },\r\n\r\n    refreshSessions: async () => {\r\n      try {\r\n        const response = await chatService.getSessions();\r\n        dispatch({ type: actionTypes.SET_SESSIONS, payload: response.sessions });\r\n      } catch (error) {\r\n        console.error('Refresh sessions error:', error);\r\n        dispatch({ type: actionTypes.SET_ERROR, payload: error.message });\r\n      }\r\n    },\r\n\r\n    deleteSession: async (sessionId) => {\r\n      try {\r\n        await chatService.deleteSession(sessionId);\r\n        \r\n        // Remove from sessions list\r\n        const updatedSessions = state.sessions.filter(s => s.id !== sessionId);\r\n        dispatch({ type: actionTypes.SET_SESSIONS, payload: updatedSessions });\r\n        \r\n        // Clear current session if it was deleted\r\n        if (state.currentSession?.id === sessionId) {\r\n          dispatch({ type: actionTypes.SET_CURRENT_SESSION, payload: null });\r\n          dispatch({ type: actionTypes.SET_MESSAGES, payload: [] });\r\n        }\r\n      } catch (error) {\r\n        console.error('Delete session error:', error);\r\n        dispatch({ type: actionTypes.SET_ERROR, payload: error.message });\r\n        throw error;\r\n      }\r\n    },\r\n\r\n    clearError: () => {\r\n      dispatch({ type: actionTypes.CLEAR_ERROR });\r\n    },\r\n\r\n    refreshModels: async () => {\r\n      try {\r\n        const modelsResponse = await chatService.getModels();\r\n        dispatch({ type: actionTypes.SET_AVAILABLE_MODELS, payload: modelsResponse.models });\r\n        return modelsResponse.models;\r\n      } catch (error) {\r\n        console.error('Refresh models error:', error);\r\n        dispatch({ type: actionTypes.SET_ERROR, payload: error.message });\r\n        throw error;\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ChatContext.Provider value={{ state, actions }}>\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n}\r\n\r\n// Custom hook to use chat context\r\nexport function useChat() {\r\n  const context = useContext(ChatContext);\r\n  if (!context) {\r\n    throw new Error('useChat must be used within a ChatProvider');\r\n  }\r\n  return context;\r\n}\r\n\r\nexport default ChatContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}