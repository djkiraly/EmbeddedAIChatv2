import React, { useState } from 'react';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import { User, Bot, Copy, Check, Image as ImageIcon, Download, Eye } from 'lucide-react';
import { formatDistanceToNow } from '../../utils/dateUtils';

const MessageItem = ({ message, isLastMessage }) => {
  const [copied, setCopied] = useState(false);
  const [imageLoading, setImageLoading] = useState(true);
  const [imageError, setImageError] = useState(false);
  const isUser = message.role === 'user';
  const isImage = message.content_type === 'image';

  const handleCopy = async () => {
    try {
      const textToCopy = isImage 
        ? (message.image_metadata?.prompt || 'Image generated by AI')
        : message.content;
      await navigator.clipboard.writeText(textToCopy);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      console.error('Failed to copy text:', error);
    }
  };

  const handleImageLoad = () => {
    setImageLoading(false);
  };

  const handleImageError = () => {
    setImageLoading(false);
    setImageError(true);
  };

  const handleDownloadImage = async () => {
    if (!isImage || !message.content) return;
    
    try {
      const response = await fetch(message.content);
      const blob = await response.blob();
      const url = URL.createObjectURL(blob);
      
      const a = document.createElement('a');
      a.href = url;
      a.download = `ai-generated-image-${Date.now()}.png`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Failed to download image:', error);
    }
  };

  const handleViewFullImage = () => {
    if (!isImage || !message.content) return;
    window.open(message.content, '_blank');
  };

  const formatTime = (timestamp) => {
    try {
      return formatDistanceToNow(new Date(timestamp), { addSuffix: true });
    } catch (error) {
      return 'Just now';
    }
  };

  return (
    <div className={`flex ${isUser ? 'justify-end' : 'justify-start'} animate-fade-in`}>
      <div className={`flex ${isUser ? 'flex-row-reverse' : 'flex-row'} max-w-3xl w-full space-x-3`}>
        {/* Avatar */}
        <div className={`flex-shrink-0 ${isUser ? 'ml-3' : 'mr-3'}`}>
          <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
            isUser ? 'bg-primary-600' : 'bg-gray-600'
          }`}>
            {isUser ? (
              <User className="w-5 h-5 text-white" />
            ) : (
              <Bot className="w-5 h-5 text-white" />
            )}
          </div>
        </div>

        {/* Message Content */}
        <div className="flex-1 min-w-0">
          <div className={`rounded-lg px-4 py-3 ${
            isUser 
              ? 'bg-primary-600 text-white' 
              : 'bg-gray-100 text-gray-900 border border-gray-200'
          }`}>
            {isUser ? (
              <div className="text-sm leading-relaxed whitespace-pre-wrap">
                {message.content}
              </div>
            ) : isImage ? (
              <div className="space-y-3">
                {/* Image Display */}
                <div className="relative">
                  {imageLoading && (
                    <div className="flex items-center justify-center h-64 bg-gray-200 rounded-lg">
                      <div className="text-gray-500 text-sm">Loading image...</div>
                    </div>
                  )}
                  
                  {imageError ? (
                    <div className="flex items-center justify-center h-64 bg-gray-200 rounded-lg">
                      <div className="text-center text-gray-500">
                        <ImageIcon className="w-12 h-12 mx-auto mb-2 opacity-50" />
                        <div className="text-sm">Failed to load image</div>
                      </div>
                    </div>
                  ) : (
                    <img
                      src={message.content}
                      alt={message.image_metadata?.prompt || "AI generated image"}
                      className={`max-w-full h-auto rounded-lg shadow-sm transition-opacity duration-300 ${
                        imageLoading ? 'opacity-0' : 'opacity-100'
                      }`}
                      onLoad={handleImageLoad}
                      onError={handleImageError}
                    />
                  )}
                </div>

                {/* Image Metadata */}
                {message.image_metadata && (
                  <div className="space-y-2 text-sm">
                    {message.image_metadata.prompt && (
                      <div>
                        <span className="font-medium text-gray-700">Prompt: </span>
                        <span className="text-gray-600">{message.image_metadata.prompt}</span>
                      </div>
                    )}
                    
                    {message.image_metadata.revised_prompt && 
                     message.image_metadata.revised_prompt !== message.image_metadata.prompt && (
                      <div>
                        <span className="font-medium text-gray-700">Revised Prompt: </span>
                        <span className="text-gray-600 italic">{message.image_metadata.revised_prompt}</span>
                      </div>
                    )}

                    <div className="flex flex-wrap gap-2 text-xs">
                      {message.image_metadata.size && (
                        <span className="px-2 py-1 bg-gray-200 text-gray-600 rounded">
                          {message.image_metadata.size}
                        </span>
                      )}
                      {message.image_metadata.quality && (
                        <span className="px-2 py-1 bg-gray-200 text-gray-600 rounded capitalize">
                          {message.image_metadata.quality}
                        </span>
                      )}
                      {message.image_metadata.style && (
                        <span className="px-2 py-1 bg-gray-200 text-gray-600 rounded capitalize">
                          {message.image_metadata.style}
                        </span>
                      )}
                    </div>
                  </div>
                )}

                {/* Image Actions */}
                {!imageError && !imageLoading && (
                  <div className="flex items-center space-x-2 pt-2 border-t border-gray-200">
                    <button
                      onClick={handleViewFullImage}
                      className="inline-flex items-center px-3 py-1 text-xs bg-gray-200 hover:bg-gray-300 text-gray-700 rounded transition-colors duration-200"
                    >
                      <Eye className="w-3 h-3 mr-1" />
                      View Full
                    </button>
                    <button
                      onClick={handleDownloadImage}
                      className="inline-flex items-center px-3 py-1 text-xs bg-gray-200 hover:bg-gray-300 text-gray-700 rounded transition-colors duration-200"
                    >
                      <Download className="w-3 h-3 mr-1" />
                      Download
                    </button>
                  </div>
                )}
              </div>
            ) : (
              <div className="message-content prose prose-sm max-w-none">
                <ReactMarkdown 
                  remarkPlugins={[remarkGfm]}
                  components={{
                    code: ({ node, inline, className, children, ...props }) => {
                      if (inline) {
                        return (
                          <code 
                            className="bg-gray-200 text-gray-800 px-1 py-0.5 rounded text-xs font-mono"
                            {...props}
                          >
                            {children}
                          </code>
                        );
                      }
                      return (
                        <div className="relative">
                          <pre className="bg-gray-800 text-gray-100 p-4 rounded-lg overflow-x-auto text-sm">
                            <code {...props}>
                              {children}
                            </code>
                          </pre>
                          <button
                            onClick={handleCopy}
                            className="absolute top-2 right-2 p-1 rounded bg-gray-700 hover:bg-gray-600 text-gray-300 hover:text-white transition-colors duration-200"
                            title="Copy code"
                          >
                            {copied ? (
                              <Check className="w-4 h-4" />
                            ) : (
                              <Copy className="w-4 h-4" />
                            )}
                          </button>
                        </div>
                      );
                    },
                    p: ({ children }) => (
                      <p className="mb-2 last:mb-0 leading-relaxed">
                        {children}
                      </p>
                    ),
                    ul: ({ children }) => (
                      <ul className="list-disc list-inside mb-2 space-y-1">
                        {children}
                      </ul>
                    ),
                    ol: ({ children }) => (
                      <ol className="list-decimal list-inside mb-2 space-y-1">
                        {children}
                      </ol>
                    ),
                    blockquote: ({ children }) => (
                      <blockquote className="border-l-4 border-gray-300 pl-4 italic text-gray-600 my-2">
                        {children}
                      </blockquote>
                    ),
                  }}
                >
                  {message.content}
                </ReactMarkdown>
              </div>
            )}
          </div>

          {/* Message Metadata */}
          <div className={`mt-1 flex items-center justify-between ${
            isUser ? 'flex-row-reverse' : 'flex-row'
          }`}>
            <div className="flex items-center space-x-2 text-xs text-gray-500">
              <span>{formatTime(message.timestamp)}</span>
              {message.model && !isUser && (
                <>
                  <span>•</span>
                  <span>{message.model}</span>
                </>
              )}
              {message.content_type && message.content_type !== 'text' && !isUser && (
                <>
                  <span>•</span>
                  <span className="capitalize">{message.content_type}</span>
                </>
              )}
              {message.token_count && message.token_count > 0 && !isUser && (
                <>
                  <span>•</span>
                  <span>{message.token_count} tokens</span>
                </>
              )}
            </div>

            {!isUser && (
              <button
                onClick={handleCopy}
                className="p-1 rounded text-gray-400 hover:text-gray-600 hover:bg-gray-200 transition-colors duration-200"
                title={isImage ? "Copy image prompt" : "Copy message"}
              >
                {copied ? (
                  <Check className="w-4 h-4" />
                ) : (
                  <Copy className="w-4 h-4" />
                )}
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default MessageItem; 